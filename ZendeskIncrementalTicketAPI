<?xml version="1.0" encoding="UTF-8"?>
<Graph author="michaelphillips" created="Wed Nov 26 09:51:18 CET 2014" guiVersion="3.4.4.P" id="1417013386460" licenseType="Commercial" modified="Tue Dec 16 01:11:12 CET 2014" modifiedBy="michaelphillips" name="ZendeskIncrementalAPI" revision="1.36" showComponentDetails="true">
<Global>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="recordName1" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="generated_timestamp" type="string"/>
<Field name="req_name" type="string"/>
<Field name="req_id" type="string"/>
<Field name="req_external_id" type="string"/>
<Field name="req_email" type="string"/>
<Field name="domain" type="string"/>
<Field name="submitter_name" type="string"/>
<Field name="assignee_name" type="string"/>
<Field name="group_name" type="string"/>
<Field name="subject" type="string"/>
<Field name="current_tags" type="string"/>
<Field name="status" type="string"/>
<Field name="priority" type="string"/>
<Field name="via" type="string"/>
<Field name="ticket_type" type="string"/>
<Field name="created_at" type="string"/>
<Field name="updated_at" type="string"/>
<Field name="assigned_at" type="string"/>
<Field name="organization_name" type="string"/>
<Field name="due_date" type="string"/>
<Field name="initially_assigned_at" type="string"/>
<Field name="solved_at" type="string"/>
<Field name="resolution_time" type="string"/>
<Field name="satisfaction_score" type="string"/>
<Field name="group_stations" type="string"/>
<Field name="assignee_stations" type="string"/>
<Field name="reopens" type="string"/>
<Field name="replies" type="string"/>
<Field name="first_reply_time_in_minutes" type="string"/>
<Field name="first_reply_time_in_minutes_within_business_hours" type="string"/>
<Field name="first_resolution_time_in_minutes" type="string"/>
<Field name="first_resolution_time_in_minutes_within_business_hours" type="string"/>
<Field name="full_resolution_time_in_minutes" type="string"/>
<Field name="full_resolution_time_in_minutes_within_business_hours" type="string"/>
<Field name="agent_wait_time_in_minutes" type="string"/>
<Field name="agent_wait_time_in_minutes_within_business_hours" type="string"/>
<Field name="requester_wait_time_in_minutes" type="string"/>
<Field name="requester_wait_time_in_minutes_within_business_hours" type="string"/>
<Field name="on_hold_time_in_minutes" type="string"/>
<Field name="on_hold_time_in_minutes_within_business_hours" type="string"/>
<Field name="assignee_id" type="string"/>
<Field name="assignee_external_id" type="string"/>
<Field name="group_id" type="string"/>
<Field name="CustomField1" type="string"/>
<Field name="CustomField2" type="string"/>
<Field name="CustomField3" type="string"/>
<Field name="id" type="string"/>
<Field name="url" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="recordName2" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="response" type="string"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="292" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="12" title="GET Zendesk Tickets" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="14" width="278" x="14" y="3">
<attr name="text"><![CDATA[NOTE 1: This reader will only work once you sign in with basic authentication.

NOTE 2: This API only allows 1,000 tickets to be returned per request. Incremental loads should be standard, and FULL loads will need to happen in 1,000 ticket increments
]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="292" id="Note1" textColorB="0" textColorG="0" textColorR="0" textFontSize="12" title="Parse API Results" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="14" width="319" x="311" y="3">
<attr name="text"><![CDATA[NOTE 3: Zendesk's API will return your results in a JSON. When configuring the mapping, remember that clover fields cannot have any spaces and that xml uses "_x005f" to represent spaces.

You'll then need to adjust the output metadata to reflect the custom fields that you have fed into your JSON reader.]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="292" id="Note2" textColorB="0" textColorG="0" textColorR="0" textFontSize="12" title="Write" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="14" width="275" x="651" y="3">
<attr name="text"><![CDATA[NOTE 4: You can use a writer component from the righthand menu. I've left a trashcan here for testing purposes, but when I'm ready to push my data to my GoodData project, I'll replace it with a GD Dataset Writer.]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node charset="UTF-8" enabled="enabled" fileURL="port:$0.response:discrete" guiName="JSONReader" guiX="407" guiY="178" id="JSONREADER" type="JSON_READER">
<attr name="mapping"><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<!-- =========================== Context ================================ -->
<!-- Context element sets the "current node" in the JSON tree             --> 
<!-- for subsequent Mapping (or Context) operations.                      -->
<!--                                                                      -->
<!-- Parameters:                                                          -->
<!--   xpath: position in the JSON tree                                   -->
<!--   outPort: (optional) routes mapped data to specified output port    -->
<!--                                                                      -->
<!-- Valid "xpath" for root context:                                      -->
<!--   xpath="/root/object"  if root of JSON structure is an object       -->
<!--   xpath="/root/array"   if root of JSON structure is an array        -->
  
<Context xpath="/root/object">
  
  <!-- =========================== Mapping ================================ -->
  <!-- Mapping elements extract data from single JSON name/value pair       -->
  <!-- in the current node or its subtree.                                  --> 
  <!--                                                                      -->
  <!-- Parameters:                                                          -->
  <!--   xpath: extract value of a name/value pair for a specified name     -->
  <!--                                                                      -->
  <Context xpath="results" outPort="0">
	   <Mapping cloverField="generated_timestamp" xpath="generated_x005ftimestamp"/>
	   <Mapping cloverField="req_name" xpath="req_x005fname"/>
	   <Mapping cloverField="req_id" xpath="req_x005fid"/>
	   <Mapping cloverField="req_external_id" xpath="req_x005fexternal_x005fid"/>
	   <Mapping cloverField="req_email" xpath="req_x005femail"/>
	   <Mapping cloverField="domain" xpath="domain"/>
	   <Mapping cloverField="submitter_name" xpath="submitter_x005fname"/>
	   <Mapping cloverField="assignee_name" xpath="assignee_x005fname"/>
	   <Mapping cloverField="group_name" xpath="group_x005fname"/>
	   <Mapping cloverField="subject" xpath="subject"/>
	   <Mapping cloverField="current_tags" xpath="current_x005ftags"/>  
	   <Mapping cloverField="status" xpath="status"/>
	   <Mapping cloverField="priority" xpath="priority"/>
	   <Mapping cloverField="via" xpath="via"/>
	   <Mapping cloverField="ticket_type" xpath="ticket_x005ftype"/>
	   <Mapping cloverField="created_at" xpath="created_x005fat"/>
	   <Mapping cloverField="updated_at" xpath="updated_x005fat"/>
	   <Mapping cloverField="assigned_at" xpath="assigned_x005fat"/>
	   <Mapping cloverField="organization_name" xpath="organization_x005fname"/>
	   <Mapping cloverField="due_date" xpath="due_x005fdate"/>
	   <Mapping cloverField="initially_assigned_at" xpath="initially_x005fassigned_x005fat"/>
	   <Mapping cloverField="solved_at" xpath="solved_x005fat"/>  
	   <Mapping cloverField="resolution_time" xpath="resolution_x005ftime"/>
	   <Mapping cloverField="satisfaction_score" xpath="satisfaction_x005fscore"/>
	   <Mapping cloverField="group_stations" xpath="group_x005fstations"/>
	   <Mapping cloverField="assignee_stations" xpath="assignee_x005fstations"/>
	   <Mapping cloverField="reopens" xpath="reopens"/>
	   <Mapping cloverField="replies" xpath="replies"/>
	   <Mapping cloverField="first_reply_time_in_minutes" xpath="first_x005freply_x005ftime_x005fin_x005fminutes"/>
	   <Mapping cloverField="first_reply_time_in_minutes_within_business_hours" xpath="first_x005freply_x005ftime_x005fin_x005fminutes_x005fwithin_x005fbusiness_x005fhours"/>
	   <Mapping cloverField="first_resolution_time_in_minutes" xpath="first_x005fresolution_x005ftime_x005fin_x005fminutes"/>
	   <Mapping cloverField="first_resolution_time_in_minutes_within_business_hours" xpath="first_x005fresolution_x005ftime_x005fin_x005fminutes_x005fwithin_x005fbusiness_x005fhours"/>
	   <Mapping cloverField="full_resolution_time_in_minutes" xpath="full_x005fresolution_x005ftime_x005fin_x005fminutes"/>   
	   <Mapping cloverField="full_resolution_time_in_minutes_within_business_hours" xpath="full_x005fresolution_x005ftime_x005fin_x005fminutes_x005fwithin_x005fbusiness_x005fhours"/>
	   <Mapping cloverField="agent_wait_time_in_minutes" xpath="agent_x005fx005fwait_x005ftime_x005fin_x005fminutes"/>
	   <Mapping cloverField="agent_wait_time_in_minutes_within_business_hours" xpath="agent_x005fwait_x005ftime_x005fin_x005fminutes_x005fwithin_x005fbusiness_x005fhours"/>
	   <Mapping cloverField="requester_wait_time_in_minutes" xpath="requester_x005fwait_x005ftime_x005fin_x005fminutes"/>
	   <Mapping cloverField="requester_wait_time_in_minutes_within_business_hours" xpath="requester_x005fwait_x005ftime_x005fin_x005fminutes_x005fwithin_x005fbusiness_x005fhours"/>
	   <Mapping cloverField="on_hold_time_in_minutes" xpath="on_x005fhold_x005ftime_x005fin_x005fminutes"/>
	   <Mapping cloverField="on_hold_time_in_minutes_within_business_hours" xpath="on_x005fhold_x005ftime_x005fin_x005fminutes_x005fwithin_x005fbusiness_x005fhours"/>
	   <Mapping cloverField="assignee_id" xpath="assignee_x005fid"/>
	   <Mapping cloverField="assignee_external_id" xpath="assignee_x005fexternal_x005fid"/>
	   <Mapping cloverField="group_id" xpath="group_x005fid"/>
	   <Mapping cloverField="CustomField1" xpath="field_x005f1"/>   
	   <Mapping cloverField="CustomField2" xpath="field_x005f2"/>
	   <Mapping cloverField="CustomField3" xpath="field_x005f3"/>
	   <Mapping cloverField="id" xpath="id"/>
	   <Mapping cloverField="url" xpath="url"/>
	   	   
  </Context>
  

</Context>]]></attr>
</Node>
<Node enabled="enabled" guiName="Trash" guiX="722" guiY="178" id="TRASH" type="TRASH"/>
<Node authConfiguration="{&quot;authMethod&quot;:&quot;BASIC&quot;,&quot;authCredentials&quot;:{&quot;USERNAME&quot;:&quot;YourZendeskAdminAccount&quot;,&quot;PASSWORD&quot;:&quot;+iUzR5WNSigy3Qm14YtfdQ==&quot;}}" charset="UTF-8" ctlFunctionsSource="//#CTL2&#10;&#10;/**&#10; * Generates request parameters (usually page numbers, offsets, timestamps, signature hashes,etc.)&#10; * Called before each request.&#10; *&#10; * Last response is is only defined if iteration number is greater than one. Therefore, for the very first request&#10; * lastResponseStatus is 200, lastResponseHeaders and lastResponseBody are empty.&#10; *&#10; * If input port is connected, incoming data record can be accessed through $in.0.fieldName&#10; *&#10; * inputEdgeRecord - contains fields of the input edge record&#10; * iterationNumber - starts at 1&#10; * lastResponseStatus - HTTP status of the previous request&#10; * lastResponseHeaders - HTTP headers of the previous request&#10; * lastResponseBody -  body of the previous request&#10; *&#10; * returns a map of params that can be used in the request URL&#10;**/&#10;function map[string, string] generateRequestParameters(map[string, string] inputEdgeRecord, integer iterationNumber, integer lastResponseStatus, map[string, string]lastResponseHeaders, string lastResponseBody) {&#10;&#10;    // Copy all input parameters into the request parameters map.&#10;    map[string, string] requestParams = inputEdgeRecord;&#10;&#10;    /**&#10;     *  PAGING&#10;     *&#10;     *  (Tip: comment/uncomment the code suitable for your use case)&#10;     **/&#10;&#10;    /** Using pages **/&#10;    requestParams[&quot;PAGE_NO&quot;] = toString(iterationNumber);&#10;&#10;    /** Using start offset and end offset **/&#10;    // integer RECORDS_PER_PAGE = 1000;&#10;    // requestParams[&quot;START_OFFSET&quot;] = toString((iterationNumber - 1) * RECORDS_PER_PAGE); //starts at 0&#10;    // requestParams[&quot;END_OFFSET&quot;] = toString((iterationNumber * RECORDS_PER_PAGE) - 1);&#10;&#10;    /*** Using start offset and records count ***/&#10;    // integer RECORDS_PER_PAGE = 1000;&#10;    // requestParams[&quot;START_OFFSET&quot;] = toString((iterationNumber - 1) * RECORDS_PER_PAGE); //starts at 0&#10;    // requestParams[&quot;RECORDS_PER_PAGE&quot;] = toString(RECORDS_PER_PAGE);&#10;&#10;    return requestParams;&#10;}&#10;&#10;/**&#10; * Determines the outcome of the response. Used for controlling the paging workflow and detecting errors.&#10; * Called after each request response.&#10; *&#10; * Default implementations returns &quot;DONE_WITH_OUTPUT&quot; to make one REST call and finish.&#10; *&#10; * If input port is connected, incoming data record can be accessed through $in.0.fieldName&#10; *&#10; * responseStatus - response HTTP status&#10; * responseHeaders - response HTTP headers&#10; * responseBody -  response body&#10; *&#10; * returns&#10; *  CONTINUE - continue to next iteration (e.g., next page)&#10; *  DONE_NO_OUTPUT (default) - last iteration finished, no data will be sent to the output port for the last iteration (no data received from the last iteration)&#10; *  DONE_WITH_OUTPUT - last iteration finished, data will be sent to the output for the last iteration (data received from the last iteration)&#10; *  RETRY - retry the last failed request&#10; *  FATAL_ERROR - fatal error, aborts the HTTP connector run&#10;**/&#10;function string checkResponse(integer responseStatus, map[string, string] responseHeaders, string responseBody) {&#10;    return &quot;DONE_WITH_OUTPUT&quot;;&#10;&#10;    // Example response handling&#10;    // if (responseStatus &gt;= 200  &amp;&amp;  responseStatus &lt; 300) {&#10;    //     return &quot;CONTINUE&quot;;&#10;    // }&#10;    // else if (responseStatus == 404) {&#10;    //     // HTTP status &quot;404 - NOT FOUND&quot; could mean there are no more pages or records&#10;    //     return &quot;DONE_NO_OUTPUT&quot;;&#10;    // }&#10;    // else if (responseStatus &gt;= 500 || responseBody.indexOf('{&quot;error&quot;: &quot;just a temporary error&quot;}') &gt; -1) {&#10;    //     // Internal server errors could be temporary (this sends the last response to the error output port)&#10;    //     return &quot;RETRY&quot;;&#10;    // }&#10;    // else {&#10;    //     // Otherwise abort the HTTP connector run (this sends the last response to the error output port)&#10;    //     return &quot;FATAL_ERROR&quot;;&#10;    // }&#10;}&#10;&#10;/**&#10; * Updates the request params before each request retry attempt if it failed previously.&#10; * Useful for resetting authorization parameter (signatures, tokens, etc.), updating timestamp, etc.&#10; *&#10; * Optional. When not defined, the request stays the same.&#10; *&#10; * If input port is connected, incoming data record can be accessed through $in.0.fieldName&#10; *&#10; * failedRequestParams original parameters of request which failed and should be retried&#10; * retryNumber number of current retry, &quot;1&quot; for the first retry&#10; * lastResponseStatus - HTTP status of the failed request&#10; * lastResponseHeaders - HTTP headers of the failed request&#10; * lastResponseBody -  body of the failed request&#10; *&#10; * returns map of the modified params for the retry request&#10;**/&#10;function map[string, string] modifyRequestParamsBeforeRetryAttempt(map[string, string] failedRequestParams, integer retryNumber,&#10;        integer responseStatus, map[string, string] responseHeaders, string responseBody) {&#10;&#10;    // Copy all the previous parameters into the retry request parameters map.&#10;    map[string, string] modifiedRequestParams = failedRequestParams;&#10;&#10;    /*** Modify the params of the request ***/&#10;&#10;    // Example of timestamp modification&#10;    // modifiedRequestParams[&quot;TIMESTAMP&quot;] = toString(date2long(today()));&#10;&#10;    return modifiedRequestParams;&#10;}" enabled="enabled" guiName="Zendesk Incremental Tickets API" guiX="50" guiY="178" id="ZENDESK_INCREMENTAL_TICKETS_API" requestMethod="GET" type="GENERIC_REST_CONNECTOR">
<attr name="url"><![CDATA[https://gooddata.zendesk.com/api/v2/exports/tickets.json?start_time=1332034771]]></attr>
<attr name="requestHeaders"><![CDATA[Content-Type=application/json
]]></attr>
</Node>
<Edge debugMode="true" fromNode="JSONREADER:0" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="TRASH:0"/>
<Edge debugMode="true" fromNode="ZENDESK_INCREMENTAL_TICKETS_API:0" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (output)" toNode="JSONREADER:0"/>
</Phase>
</Graph>
