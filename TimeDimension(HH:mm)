<?xml version="1.0" encoding="UTF-8"?><Graph author="michaelphillips" created="Thu Jan 15 08:43:42 PST 2015" guiVersion="3.4.4.P" id="1421361529126" licenseType="Commercial" modified="Mon Jan 26 11:33:03 PST 2015" modifiedBy="michaelphillips" name="TimeDimension" revision="1.11" showComponentDetails="true">
<Global>
<Metadata id="Metadata2" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="recordName" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field eofAsDelimiter="false" name="hour" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="min" nullable="true" shift="0" size="0" type="string"/>
<Field name="TimeID" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="recordName1" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="field1" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="recordName2" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="hour" type="integer"/>
<Field name="min" type="integer"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="267" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="12" title="Time Dimension" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="14" width="805" x="74" y="59"/>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" guiName="DataGenerator" guiX="122" guiY="158" id="DATA_GENERATOR" recordsNumber="24" type="DATA_GENERATOR">
<attr name="generate"><![CDATA[//#CTL2
integer hourx = -1;
// Generates output record.
function integer generate() {
	hourx++; // hourx = hour + 1
	$out.0.field1 = hourx;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the generate. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if generate() throws an exception.
// function integer generateOnError(string errorMessage, string stackTrace) {
// }

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Normalizer" guiX="324" guiY="158" id="NORMALIZER" type="NORMALIZER">
<attr name="normalize"><![CDATA[//#CTL2
// This transformation defines the way in which a single input record is normalized
// into multiple output records.

// This function is called for all input records.
// It parses each single input record and returns the number of records
// that should be created from such input record.
function integer count() {
	//raiseError("Function not implemented!");
	return 60;
}

// This function creates new records for the output, based on single input record
// that has been parsed by the count() function.
// It is called count() times for each input record.
// The idx argument specifies which output record is being created,
// its values range is from 0 to count() - 1.
function integer transform(integer idx) {
	$out.0.hour = $in.0.field1;
	$out.0.min = idx;

	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if count() throws an exception.
// function integer countOnError(string errorMessage, string stackTrace) {
//}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace, integer idx) {
// }

// Called after transform(count-1) to return the resources that have been used to their initial state
// so that next input record may be parsed.
// function void clean() {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Reformat" guiX="514" guiY="158" id="REFORMAT" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	if ($in.0.hour <10)
		$out.0.hour = "0"+ num2str($in.0.hour);
	else $out.0.hour = num2str($in.0.hour);
	
	
	if ($in.0.min <10)
		$out.0.min = "0"+ num2str($in.0.min);
	else $out.0.min = num2str($in.0.min);	

	$out.0.TimeID = $out.0.hour+":"+$out.0.min;


	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Trash" guiX="720" guiY="158" id="TRASH" type="TRASH"/>
<Edge debugMode="true" fromNode="DATA_GENERATOR:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="NORMALIZER:0"/>
<Edge debugMode="true" fromNode="NORMALIZER:0" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="REFORMAT:0"/>
<Edge debugMode="true" fromNode="REFORMAT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="TRASH:0"/>
</Phase>
</Graph>
